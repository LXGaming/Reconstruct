archivesBaseName = "reconstruct-cli"

configurations {
    shadow {
        runtimeOnly.extendsFrom(shadow)
    }

    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.clear()
        it.outgoing.artifact(shadowJar)
    }
}

repositories {
}

dependencies {
    implementation(project(path: ":reconstruct-common"))
    implementation("com.beust:jcommander:1.82")
    implementation("org.apache.logging.log4j:log4j-core:2.22.0")
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:2.22.0")
    implementation("org.fusesource.jansi:jansi:2.4.1")
}

build {
    finalizedBy("signJar")
}

compileJava {
    dependsOn(":reconstruct-common:build")
}

jar {
    enabled = false
    dependsOn("shadowJar")
    manifest {
        attributes("Main-Class": "io.github.lxgaming.reconstruct.cli.Main")
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            artifact javadocJar
            artifact shadowJar
            artifact sourcesJar
        }
    }
}

shadowJar {
    archiveClassifier.set(null)
    dependencies {
        exclude(dependency("net.sf.proguard:proguard-base"))
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: ${it.name}")

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: ${it.name}")
        }
    }
}