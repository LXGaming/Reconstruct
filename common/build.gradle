plugins {
    id "net.kyori.blossom"
}

archivesBaseName = "reconstruct-common"

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.clear()
        it.outgoing.artifact(shadowJar)
    }
}

repositories {
}

dependencies {
    api("io.github.lxgaming:common:1.2.10")
    compileOnly("net.sf.proguard:proguard-base:6.2.2")
    api("org.slf4j:slf4j-api:2.0.9")
    api("org.ow2.asm:asm-commons:9.6")
}

jar {
    enabled = false
    dependsOn("shadowJar")
}

processResources {
    from("../LICENSE")
    rename("LICENSE", "LICENSE-Reconstruct")
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
        }
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.compileClasspath]

    exclude {
        // Exclude all ProGuard class files except the MappingProcessor & MappingReader
        if (it.name.endsWith(".class") && it.path.startsWith("proguard/")) {
            return !(it.path == "proguard/obfuscate/MappingProcessor.class" || it.path == "proguard/obfuscate/MappingReader.class")
        }

        return false
    }
}

sourceSets {
    main {
        blossom {
            javaSources {
                property("version", version)
            }
        }
    }
}