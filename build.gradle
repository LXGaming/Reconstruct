plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id "net.kyori.blossom" version "2.1.0" apply false
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8" apply false
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "org.jetbrains.gradle.plugin.idea-ext"
    apply plugin: "signing"

    group = "io.github.lxgaming"

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-engine:5.10.1")
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
    }

    publishing {
        publications {
            mavenPublication(MavenPublication) {
                groupId group
                artifactId archivesBaseName
                version version
                pom {
                    name = "Reconstruct"
                    description = "ProGuard Deobfuscator"
                    url = "https://github.com/LXGaming/Reconstruct"
                    developers {
                        developer {
                            id = "lxgaming"
                            name = "LXGaming"
                        }
                    }
                    issueManagement {
                        system = "GitHub Issues"
                        url = "https://github.com/LXGaming/Reconstruct/issues"
                    }
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/LXGaming/Reconstruct.git"
                        developerConnection = "scm:git:https://github.com/LXGaming/Reconstruct.git"
                        url = "https://github.com/LXGaming/Reconstruct"
                    }
                }
            }
        }
        repositories {
            if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                maven {
                    name = "sonatype"
                    url = version.contains("-SNAPSHOT") ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                    credentials {
                        username project.property("sonatypeUsername")
                        password project.property("sonatypePassword")
                    }
                }
            }
        }
    }

    signing {
        if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
            useInMemoryPgpKeys(project.property("signingKey"), project.property("signingPassword"))
        }

        sign publishing.publications
    }

    test {
        testLogging {
            exceptionFormat = "full"
        }

        useJUnitPlatform()
    }
}